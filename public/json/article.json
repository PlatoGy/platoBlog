{
    "code":200,
    "success":true,
    "data":{
        "_id":"599fb61e7dd03248a2e8d582",
        "title":"探索编码的世界",
        "content":"<h1 id=\"一、包管理器的依赖处理简史\">一、包管理器的依赖处理简史</h1>\n<p>划分为两个阶段，以npm-v3版本为分界线</p>\n<h2 id=\"（一）npm-v3之前\">（一）npm-v3之前</h2>\n<p>npm2所有项目的依赖是嵌套关系，直接按照包依赖的树形结构下载填充本地目录结构，也就是说每个包都会将该包的依赖组织到当前包所在的node_modules目录中。</p>\n<p>例如我们在项目中使用了foo这个包，而foo又依赖了bar，此时我们在执行install以后，node_modules会出现以下目录结构：</p>\n<p><img src=\"/resource/img/2022/8/13/1660370084549_0.webp\" alt=\"1660370082107.jpg\"></p>\n<p>此种目录结构会出现两种问题：</p>\n<h3 id=\"1、依赖树层级比较深在windows上的问题\">1、依赖树层级比较深在Windows上的问题</h3>\n<p>对于linux系统来讲，一个比较深的文件目录是不会造成任何问题的；而在Windows系统中，一个文件的路径所构成的字符串长度是有限的，如果此时的包路径长度超出了系统所支持的长度，就会出现包找不到的问题。</p>\n<h3 id=\"2、会出相同的包\">2、会出相同的包</h3>\n<p>假如项目中的包A和包B都使用了loadsh，则loadsh这个包会在node_modules出现两个，分别存储在两个包的子依赖之下，当这种情况在同个项目出现多次时，容易造成磁盘空间的浪费。</p>\n<h2 id=\"二npm-v3\">(二)npm-v3</h2>\n<p>而npm3采用了扁平结构，改进了嵌套过多、套路过深的情况，会将所有依赖放在第二层依赖中，所有的依赖只嵌套一次，彼此平行，也就是平铺的结构。</p>\n<p>在install的过程时，按照 package.json 里依赖的顺序依次解析，遇到新的包就把它放在第一级目录，后面如果遇到一级目录已经存在的包，会先判断该版本，如果版本一样则忽略，否则会按照npm2的方式依次挂在依赖包目录下。</p>\n<p>在解决了npm2的痛点之后，其也会带来新的的问题：</p>\n<h3 id=\"1、包之间访问的不可控导致的隐患\">1、包之间访问的不可控导致的隐患</h3>\n<p>假如包A依赖包B，包B依赖包C，在install之后，由于A、B、C三个包都是平级的，则包B可以反过来使用包A，包C可以反过来引用包A和包B；而这种引用方式在package.json中是无法表现及限制的，容易埋下安全隐患。</p>\n<h3 id=\"2、拉平算法的复杂度\">2、拉平算法的复杂度</h3>\n<p>由于在每次安装包时都要遍历一次node_modules目录，所以我们在install时其扁平化算法的时间复杂度是O(n²)，这也是我们在没有package-lock.json时第一次install会比较慢的原因之一，因为npm需要重新建立依赖索引。</p>\n<p>另外，存在极少部分包在拉平之后无法正常的为父包运行的情况，这也是npm需要考虑的问题。</p>\n<h3 id=\"3、包版本的冲突\">3、包版本的冲突</h3>\n<p>例如<a href=\"mailto:&#x76;&#x75;&#x65;&#x40;&#x32;&#x2e;&#54;&#x2e;&#x31;&#52;\" title=\"&#x76;&#x75;&#x65;&#x40;&#x32;&#x2e;&#54;&#x2e;&#x31;&#52;\" target=\"_blank\">&#x76;&#x75;&#x65;&#x40;&#x32;&#x2e;&#54;&#x2e;&#x31;&#52;</a>中依赖的babel是^7.0.0，而你在项目中自己引入了babel@6的版本，而在拉平后babel的版本只能存在一个，就会出现包冲突的问题，容易导致编译时报错或运行时报错。</p>\n<h1 id=\"二、pnpm的出现\">二、pnpm的出现</h1>\n<p>pnpm的做法与npm的做法是不一样的</p>\n<h2 id=\"通过链接的方式处理依赖树\">通过链接的方式处理依赖树</h2>\n<p>例如我们在项目中使用了foo这个包，而foo又依赖了bar，此时我们在执行install以后，node_modules会出现以下目录结构：</p>\n<p><img src=\"/resource/img/2022/8/13/1660372248315_0.webp\" alt=\"1660372245982.jpg\"></p>\n<p>即pnpm采用软连接+硬连接的构造方式：\n1、通过软链接保持嵌套的依赖结构，存储一份拉平后所在目标的引用。\n2、同一个包分版本号存储，包拉平后不同的版本号都会保留</p>\n<p><a href=\"https://juejin.cn/post/6916101419703468045\" title=\"这篇文章详细介绍了软连接+硬链接在pnpm中是如何使用的\" target=\"_blank\">这篇文章详细介绍了软连接+硬链接在pnpm中是如何使用的</a></p>\n<p>这样在解决了第一阶段的问题后也不会出现新的问题</p>\n<h1 id=\"三、pnpm的使用\">三、pnpm的使用</h1>\n<p>pnpm需要在node版本14以上，所以需要环境的支持，这里推荐使用nvm管理node的版本，方便来回切换所需的node版本。</p>\n<p>1、安装node14及以上版本（可忽略）</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-attribute\">nvm</span> install <span class=\"hljs-number\">14</span>.<span class=\"hljs-number\">13</span>.<span class=\"hljs-number\">1</span>\n</code></pre>\n<p>2、全局安装pnpm</p>\n<pre><code class=\"language-javascript\">npm <span class=\"hljs-keyword\">install</span> pnpm -g\n</code></pre>\n<p>之后即可使用pnpm去替换npm执行各种命令</p>\n<h2 id=\"（一）pnpm的常用命令\">（一）pnpm的常用命令</h2>\n<p>1、设置源</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">//查看源</span>\npnpm config get registry \n<span class=\"hljs-comment\">//切换淘宝源</span>\npnpm config set registry https:<span class=\"hljs-comment\">//registry.npmmirror.com/</span>\n</code></pre>\n<p>2、使用</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-selector-tag\">pnpm</span> <span class=\"hljs-selector-tag\">install</span> <span class=\"hljs-selector-attr\">[name]</span>  <span class=\"hljs-comment\">// </span>\n<span class=\"hljs-selector-tag\">pnpm</span> <span class=\"hljs-selector-tag\">i</span> <span class=\"hljs-selector-attr\">[name]</span>\n<span class=\"hljs-selector-tag\">pnpm</span> <span class=\"hljs-selector-tag\">add</span> <span class=\"hljs-selector-attr\">[name]</span>    <span class=\"hljs-comment\">// -S  默认写入dependencies</span>\n<span class=\"hljs-selector-tag\">pnpm</span> <span class=\"hljs-selector-tag\">add</span> <span class=\"hljs-selector-attr\">[name]</span> <span class=\"hljs-selector-tag\">-D</span>    <span class=\"hljs-comment\">// -D devDependencies</span>\n<span class=\"hljs-selector-tag\">pnpm</span> <span class=\"hljs-selector-tag\">add</span> <span class=\"hljs-selector-attr\">[name]</span> <span class=\"hljs-selector-tag\">-g</span>    <span class=\"hljs-comment\">// 全局安装</span>\n</code></pre>\n<p>3、移除</p>\n<pre><code class=\"language-javascript\">pnpm <span class=\"hljs-keyword\">remove</span> [name]            <span class=\"hljs-comment\">//移除包</span>\npnpm <span class=\"hljs-keyword\">remove</span> [name] --<span class=\"hljs-keyword\">global</span>      <span class=\"hljs-comment\">//移除全局包</span>\n</code></pre>\n<p>4、更新</p>\n<pre><code class=\"language-javascript\">pnpm up                <span class=\"hljs-regexp\">//</span>更新所有依赖项\npnpm upgrade [name]        <span class=\"hljs-regexp\">//</span>更新包\npnpm upgrade [name] --global   <span class=\"hljs-regexp\">//</span>更新全局包\n</code></pre>\n<p>5、设置存储路径</p>\n<pre><code class=\"language-javascript\">pnpm<span class=\"hljs-built_in\"> config </span><span class=\"hljs-built_in\">set</span> store-dir /path/<span class=\"hljs-keyword\">to</span>/.pnpm-store\n</code></pre>\n<h2 id=\"（二）npm转pnpm中遇到的问题\">（二）npm转pnpm中遇到的问题</h2>\n<h3 id=\"1、auto-install-peers\">1、auto-install-peers</h3>\n<p>在执行pnpm install时，会出现类似以下报错</p>\n<p><img src=\"/resource/img/2022/8/13/1660374554585_0.webp\" alt=\"1660374551381.jpg\"></p>\n<p>我们只需在项目下的.npmrc文件中加入以下配置即可：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-attr\">auto-install-peers</span>=<span class=\"hljs-literal\">true</span>\n</code></pre>\n<h3 id=\"2、silly-bugs\">2、silly bugs</h3>\n<p>此bug是由于pnpm对包引用限制较严格导致的。\n假如项目中引用了A包，A包引入了loadsh包，此时如果项目中的package.json没有将loadsh加到dependencies中，npm和pnpm有以下表现：</p>\n<p>pnpm：会报错，提示not find module loadsh in xxxx\nnpm：正常运行，因为npm会将依赖目录打平，即没定义dependencies也找得到loadsh</p>\n<p>所以如果执行pnpm run server时报相关错误，将对应的包声明到dependencies或者pnpm add再install，直到所有的not find module都解决即可。</p>\n<h4 id=\"为什么pnpm不允许未声明的包的使用？\">为什么pnpm不允许未声明的包的使用？</h4>\n<p>①假如包A在dependencies中的声明为：^1.0.4，且<a href=\"mailto:&#x41;&#x40;&#49;&#x2e;&#48;&#x2e;&#x34;\" title=\"&#x41;&#x40;&#49;&#x2e;&#48;&#x2e;&#x34;\" target=\"_blank\">&#x41;&#x40;&#49;&#x2e;&#48;&#x2e;&#x34;</a>依赖了<a href=\"mailto:&#x6c;&#111;&#97;&#x64;&#115;&#x68;&#x40;&#x32;&#46;&#x31;&#46;&#51;\" title=\"&#x6c;&#111;&#97;&#x64;&#115;&#x68;&#x40;&#x32;&#46;&#x31;&#46;&#51;\" target=\"_blank\">&#x6c;&#111;&#97;&#x64;&#115;&#x68;&#x40;&#x32;&#46;&#x31;&#46;&#51;</a></p>\n<p>②你在项目没有在dependencies声明就直接使用了<a href=\"mailto:&#x6c;&#111;&#97;&#x64;&#x73;&#104;&#64;&#x32;&#46;&#49;&#x2e;&#x33;\" title=\"&#x6c;&#111;&#97;&#x64;&#x73;&#104;&#64;&#x32;&#46;&#49;&#x2e;&#x33;\" target=\"_blank\">&#x6c;&#111;&#97;&#x64;&#x73;&#104;&#64;&#x32;&#46;&#49;&#x2e;&#x33;</a>的api-setA，项目是能够正常运行的。</p>\n<p>然后某一天包A发布了patch版本，将1.0.4升级到了1.0.5,并且<a href=\"mailto:&#65;&#64;&#x31;&#x2e;&#x30;&#46;&#53;\" title=\"&#65;&#64;&#x31;&#x2e;&#x30;&#46;&#53;\" target=\"_blank\">&#65;&#64;&#x31;&#x2e;&#x30;&#46;&#53;</a>更新了loadsh的版本为3.0.0，而<a href=\"mailto:&#108;&#111;&#97;&#x64;&#115;&#104;&#64;&#x33;&#x2e;&#48;&#46;&#x30;\" title=\"&#108;&#111;&#97;&#x64;&#115;&#104;&#64;&#x33;&#x2e;&#48;&#46;&#x30;\" target=\"_blank\">&#108;&#111;&#97;&#x64;&#115;&#104;&#64;&#x33;&#x2e;&#48;&#46;&#x30;</a>把api-setA给废弃了。</p>\n<p>又过了一段时间，你公司线上的机器重新执行了install，将包A更新到了1.0.5，但之前又存在被废弃的api-setA，于是就引发了意外的问题。</p>\n<p>但假如你一开始就在dependencies声明了loadsh，就不会出现此问题了，所以pnpm需要限制未声明的包使用。</p>\n<h1 id=\"参考\">参考</h1>\n<blockquote>\n<p>[1] <a href=\"https://www.bilibili.com/video/BV1v3411V7yy?share_source=copy_web&vd_source=4d6024cc8b28dc99282e9a15162c41fe\" title=\"https://www.bilibili.com/video/BV1v3411V7yy?share_source=copy_web&amp;vd_source=4d6024cc8b28dc99282e9a15162c41fe\" target=\"_blank\">https://www.bilibili.com/video/BV1v3411V7yy?share_source=copy_web&amp;vd_source=4d6024cc8b28dc99282e9a15162c41fe</a></p>\n<p>[2] <a href=\"https://juejin.cn/post/6916101419703468045\" title=\"https://juejin.cn/post/6916101419703468045\" target=\"_blank\">https://juejin.cn/post/6916101419703468045</a></p>\n</blockquote>\n","createTime":"2017年8月25日 13:31","lastEditTime":"2017年9月12日 23:25","publish":true,"tags":["599fb6177dd03248a2e8d581"],"id":"599fb61e7dd03248a2e8d582"}}